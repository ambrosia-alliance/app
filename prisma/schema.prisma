generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model article {
  id                      String                   @id
  title                   String
  abstract                String?
  authors                 String?
  created_at              DateTime                 @default(now()) @db.Timestamp(6)
  source                  String?
  source_url              String
  content_url             String?
  published_date          DateTime?                @db.Timestamp(6)
  therapy_id              Int
  processed               Boolean                  @default(false)
  therapy                 therapy                  @relation(fields: [therapy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  article_classifications article_classification[]
  citations               citations[]
}

model therapy {
  id                      Int                      @id @default(autoincrement())
  name                    String
  image_url               String
  description             String
  created_at              DateTime                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime                 @default(now()) @db.Timestamp(6)
  cost_summary            String?
  cost_amount             Decimal?                 @db.Decimal(12, 2)
  cost_citation_ids       Json                     @default("[]")
  num_participants        Int?
  article                 article[]
  article_classifications article_classification[]
  effects                 effects[]
  therapy_info            therapy_info?            @relation("TherapyInfoRelation")
}

model therapy_info {
  therapy_id Int     @id
  pros       String?
  cons       String?
  summary    String?
  image_url  String?
  therapy    therapy @relation("TherapyInfoRelation", fields: [therapy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "therapy_info_fk")
}

model citations {
  id         Int     @id @default(autoincrement())
  quote_text String?
  article_id String
  locator    String? @db.VarChar(200)
  article    article @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([article_id])
}

model effects {
  id                Int       @id @default(autoincrement())
  therapy_id        Int
  name              String    @db.VarChar(200)
  deprecated        Boolean?  @default(false)
  deprecated_reason String?
  category          String?   @db.VarChar(100)
  summary           String?
  citation_ids      Json?     @default("[]") @db.Json
  confidence_score  Float?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  therapy           therapy   @relation(fields: [therapy_id], references: [id], onDelete: Cascade)

  @@unique([therapy_id, name])
  @@index([therapy_id])
  @@index([name])
  @@index([category], map: "idx_effects_category")
  @@index([confidence_score], map: "idx_effects_confidence")
  @@index([deprecated], map: "idx_effects_deprecated")
}

model article_classification {
  id            Int      @id @default(autoincrement())
  article_id    String   @db.VarChar(255)
  therapy_id    Int
  sentence_text String
  sentence_idx  Int
  category      String   @db.VarChar(100)
  confidence    Float
  model_version String?  @db.VarChar(100)
  processed_at  DateTime @default(now()) @db.Timestamp(6)
  curated       Boolean? @default(false)
  article       article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  therapy       therapy  @relation(fields: [therapy_id], references: [id], onDelete: Cascade)

  @@index([article_id])
  @@index([category])
  @@index([therapy_id])
  @@index([confidence])
  @@index([curated], map: "idx_article_classification_curated")
}

model processing_log {
  id                    Int       @id @default(autoincrement())
  article_id            String    @db.VarChar(255)
  status                String    @db.VarChar(50)
  error_message         String?
  sentences_processed   Int?      @default(0)
  classifications_count Int?      @default(0)
  started_at            DateTime  @default(now()) @db.Timestamp(6)
  completed_at          DateTime? @db.Timestamp(6)

  @@index([article_id])
  @@index([status])
}
