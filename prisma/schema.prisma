generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model article {
  id                      String                   @id
  title                   String
  abstract                String?
  authors                 String?
  createdat               DateTime                 @default(now()) @db.Timestamp(6)
  source                  String?
  sourceurl               String
  contenturl              String?
  publisheddate           DateTime?                @db.Timestamp(6)
  therapyid               Int
  processed               Boolean                  @default(false)
  journal                 String?                  @db.VarChar(300)
  year                    Int?
  doi                     String?                  @db.VarChar(200)
  therapy                 therapy                  @relation(fields: [therapyid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  citations               citations[]
  article_details         article_details?
  article_classifications article_classification[]
}

model therapy {
  id                      Int                      @id @default(autoincrement())
  name                    String
  createdat               DateTime                 @default(now()) @db.Timestamp(6)
  updatedat               DateTime                 @default(now()) @db.Timestamp(6)
  cost_summary            String?
  cost_currency           String?
  cost_amount             Decimal?                 @db.Decimal(12, 2)
  cost_citation_ids       Json                     @default("[]")
  article                 article[]
  therapy_info            therapy_info?            @relation("TherapyInfoRelation")
  effects                 effects[]
  article_classifications article_classification[]
}

model therapy_info {
  therapyid Int     @id
  pros      String?
  cons      String?
  summary   String?
  image_url String?
  therapy   therapy @relation("TherapyInfoRelation", fields: [therapyid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "therapy_info_fk")
}

model citations {
  id         Int     @id @default(autoincrement())
  quote_text String? @db.Text
  article_id String
  locator    String? @db.VarChar(200)
  article    article @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([article_id])
}

model article_details {
  article_id                String   @id
  design_summary            String?  @db.Text
  design_citation_ids       Json     @default("[]")
  participants_total        Int?
  participants_citation_ids Json     @default("[]")
  sex_summary               String?  @db.Text
  sex_citation_ids          Json     @default("[]")
  age_summary               String?  @db.Text
  age_citation_ids          Json     @default("[]")
  created_at                DateTime @default(now()) @db.Timestamp(6)
  article                   article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
}

model effects {
  id                                Int     @id @default(autoincrement())
  therapy_id                        Int
  name                              String  @db.VarChar(200)
  efficacy_extent_summary           String? @db.Text
  efficacy_extent_citation_ids      Json    @default("[]")
  efficacy_rate_summary             String? @db.Text
  efficacy_rate_citation_ids        Json    @default("[]")
  side_effect_severity_summary      String? @db.Text
  side_effect_severity_citation_ids Json    @default("[]")
  side_effect_risk_summary          String? @db.Text
  side_effect_risk_citation_ids     Json    @default("[]")
  participants_total                Int?
  sex_summary                       String? @db.Text
  age_summary                       String? @db.Text
  design_summaries                  Json    @default("[]")
  therapy                           therapy @relation(fields: [therapy_id], references: [id], onDelete: Cascade)

  @@unique([therapy_id, name])
  @@index([therapy_id])
  @@index([name])
}

model article_classification {
  id            Int      @id @default(autoincrement())
  article_id    String   @db.VarChar(255)
  therapy_id    Int
  sentence_text String   @db.Text
  sentence_idx  Int
  category      String   @db.VarChar(100)
  confidence    Float
  model_version String?  @db.VarChar(100)
  processed_at  DateTime @default(now()) @db.Timestamp(6)
  article       article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  therapy       therapy  @relation(fields: [therapy_id], references: [id], onDelete: Cascade)

  @@index([article_id])
  @@index([category])
  @@index([therapy_id])
  @@index([confidence])
}

model processing_log {
  id                    Int       @id @default(autoincrement())
  article_id            String    @db.VarChar(255)
  status                String    @db.VarChar(50)
  error_message         String?   @db.Text
  sentences_processed   Int?      @default(0)
  classifications_count Int?      @default(0)
  started_at            DateTime  @default(now()) @db.Timestamp(6)
  completed_at          DateTime? @db.Timestamp(6)

  @@index([article_id])
  @@index([status])
}
